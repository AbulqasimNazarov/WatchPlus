// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WatchPlus.Data;

#nullable disable

namespace WatchPlus.Migrations
{
    [DbContext(typeof(WatchPlusDbContext))]
    partial class WatchPlusDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WatchPlus.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FilmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("WatchPlus.Models.Film", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Presentation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PresentationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<string>("Star")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerVideo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Films");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f8a8c851-2cbc-48c2-a439-bdc494d6329a"),
                            Category = "[\"Action\",\"Crime\",\"Thriller\"]",
                            Image = "Assets/FilmsImg/f8a8c851-2cbc-48c2-a439-bdc494d6329a.jpg",
                            Name = "Need for Speed",
                            Presentation = "Fresh from prison, a street racer who was framed by a wealthy business associate joins a cross-country race with revenge in mind. His ex-partner, learning of the plan, places a massive bounty on his head as the race begins.",
                            PresentationDate = new DateTime(2014, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rate = 4.5,
                            Star = "Aaron Paul",
                            TrailerVideo = "https://www.youtube.com/embed/u3wtVI-aJuw"
                        },
                        new
                        {
                            Id = new Guid("ba466485-1828-4a68-8976-d7d5ca5a7862"),
                            Category = "[\"Action\",\"Crime\"]",
                            Image = "Assets/FilmsImg/ba466485-1828-4a68-8976-d7d5ca5a7862.jpg",
                            Name = "The Gentlemen",
                            Presentation = "An American expat tries to sell off his highly profitable marijuana empire in London, triggering plots, schemes, bribery and blackmail in an attempt to steal his domain out from under him.",
                            PresentationDate = new DateTime(2020, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rate = 4.7000000000000002,
                            Star = "Matthew McConaughey",
                            TrailerVideo = "https://www.youtube.com/embed/Ify9S7hj480"
                        },
                        new
                        {
                            Id = new Guid("7cea2648-a8fc-4cca-9730-85bf83ac437c"),
                            Category = "[\"Action\",\"Adventure\",\"Comedy\"]",
                            Image = "Assets/FilmsImg/7cea2648-a8fc-4cca-9730-85bf83ac437c.jpg",
                            Name = "Teenage Mutant Ninja Turtles",
                            Presentation = "When a kingpin threatens New York City, a group of mutated turtle warriors must emerge from the shadows to protect their home.",
                            PresentationDate = new DateTime(2014, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rate = 4.2999999999999998,
                            Star = "Megan Fox",
                            TrailerVideo = "https://www.youtube.com/embed/VZZ0PnDZdZk"
                        },
                        new
                        {
                            Id = new Guid("6a751f98-7906-4cc9-bb48-19cc37947d81"),
                            Category = "[\"Action\",\"Comedy\"]",
                            Image = "Assets/FilmsImg/6a751f98-7906-4cc9-bb48-19cc37947d81.jpg",
                            Name = "Kingsman: The Secret Service",
                            Presentation = "A spy organisation recruits a promising street kid into the agency's training program, while a global threat emerges from a twisted tech genius.",
                            PresentationDate = new DateTime(2015, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rate = 4.4000000000000004,
                            Star = "Colin Firth",
                            TrailerVideo = "https://www.youtube.com/embed/kl8F-8tR8to"
                        },
                        new
                        {
                            Id = new Guid("27bad295-e53c-4060-8fb5-57681f1e4354"),
                            Category = "[\"Action\",\"Adventure\",\"Sci-Fi\"]",
                            Image = "Assets/FIlmsImg/27bad295-e53c-4060-8fb5-57681f1e4354.jpg",
                            Name = "Spider-man",
                            Presentation = "After being bitten by a genetically-modified spider, a shy teenager gains spider-like abilities that he uses to fight injustice as a masked superhero and face a vengeful enemy.",
                            PresentationDate = new DateTime(2002, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rate = 4.5999999999999996,
                            Star = "Tobey Maguire",
                            TrailerVideo = "https://www.youtube.com/embed/t06RUxPbp_c"
                        });
                });

            modelBuilder.Entity("WatchPlus.Models.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HttpMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("WatchPlus.Models.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FilmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("WatchPlus.Models.TvSHow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Presentation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Rate")
                        .HasColumnType("bigint");

                    b.Property<string>("Star")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerVideo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("presentationDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TvShows");
                });

            modelBuilder.Entity("WatchPlus.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WatchPlus.Models.Comment", b =>
                {
                    b.HasOne("WatchPlus.Models.Film", "Film")
                        .WithMany("Comments")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchPlus.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WatchPlus.Models.Rating", b =>
                {
                    b.HasOne("WatchPlus.Models.Film", "Film")
                        .WithMany("Ratings")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchPlus.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WatchPlus.Models.Film", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("WatchPlus.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
